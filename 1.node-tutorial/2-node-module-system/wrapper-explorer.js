// 2. NODE.JS MODULE WRAPPER EXPLORER
// Module wrapper'Ä±n Ã§alÄ±ÅŸmasÄ±nÄ± gÃ¶zlemlemek iÃ§in Ã¶rnek modÃ¼l

/*
=== WRAPPER EXPLORER NEDÄ°R? ===
Bu dosya module wrapper'Ä±n nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± gÃ¶stermek iÃ§in tasarlanmÄ±ÅŸtÄ±r.
- ModÃ¼l yÃ¼klendiÄŸinde otomatik Ã§alÄ±ÅŸan kodlar
- __filename ve __dirname deÄŸerlerini gÃ¶sterme
- Export edilen fonksiyonlarÄ±n tanÄ±mlanmasÄ±

=== MODÃœL YÃœKLENMESÄ° ===
Bu modÃ¼l require() ile Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda:
1. Wrapper fonksiyonu otomatik Ã§alÄ±ÅŸÄ±r
2. Console.log'lar hemen yazdÄ±rÄ±lÄ±r
3. greet fonksiyonu dÄ±ÅŸa aktarÄ±lÄ±r
4. ModÃ¼l cache'e alÄ±nÄ±r (bir kez yÃ¼klenir)
*/

// ModÃ¼lÃ¼n yÃ¼klendiÄŸini gÃ¶steren mesaj
// Bu modÃ¼l require edildiÄŸinde ilk Ã§alÄ±ÅŸacak kod
console.log("wrapper-explorer modÃ¼lÃ¼ yÃ¼klendi");

// Bu dosyanÄ±n tam yolunu gÃ¶sterir
// __filename wrapper tarafÄ±ndan otomatik saÄŸlanÄ±r
console.log("wrapper-explorer __filename:", __filename);

// Bu dosyanÄ±n bulunduÄŸu klasÃ¶rÃ¼n yolunu gÃ¶sterir
// __dirname wrapper tarafÄ±ndan otomatik saÄŸlanÄ±r  
console.log("wrapper-explorer __dirname:", __dirname);

// greet fonksiyonunu dÄ±ÅŸa aktarÄ±r - ES6 export syntax kullanÄ±lÄ±yor
// Bu fonksiyon baÅŸka dosyalardan require ile kullanÄ±labilir
export const greet = function(name){ // Function expression ile greet fonksiyonu tanÄ±mlanÄ±yor
    console.log("Merhaba", name, "- wrapper-explorer'dan selamlar!"); // Selamlama mesajÄ± yazdÄ±rÄ±r
};

/*
=== MODÃœL EXPORT YÃ–NTEMLERÄ° ===

1. module.exports ile:
module.exports = { greet };

2. exports ile (module.exports'un kÄ±sa hali):
exports.greet = function(name) { ... };

3. ES6 export ile:
export const greet = function(name) { ... };

=== WRAPPER ETKÄ°SÄ° ===
Bu modÃ¼l wrapper-demo.js tarafÄ±ndan require edildiÄŸinde:
1. Ä°lk satÄ±rlar (console.log'lar) hemen Ã§alÄ±ÅŸÄ±r
2. greet fonksiyonu dÄ±ÅŸa aktarÄ±lÄ±r
3. wrapper-demo.js'te greet("Hakan") Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda fonksiyon Ã§alÄ±ÅŸÄ±r

=== MODÃœL CACHE ===
ğŸ“Œ Node.js modÃ¼lleri bir kez yÃ¼kler ve cache'e alÄ±r
ğŸ“Œ Ä°kinci require'da cache'teki versiyon kullanÄ±lÄ±r
ğŸ“Œ require.cache ile cache yÃ¶netilebilir
ğŸ“Œ Cache sayesinde performans artar

=== Ã–NEMLÄ° NOTLAR ===
âœ¨ ModÃ¼l yÃ¼klenirken top-level kod hemen Ã§alÄ±ÅŸÄ±r
âœ¨ Export edilen fonksiyonlar Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r
âœ¨ __filename ve __dirname her modÃ¼lde farklÄ±dÄ±r
âœ¨ Wrapper her modÃ¼lÃ¼ kendi scope'unda izole eder
âœ¨ Bir modÃ¼l sadece bir kez evaluate edilir
*/